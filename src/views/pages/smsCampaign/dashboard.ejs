<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="page-content-wrapper">
  <div class="page-content">
    <div class="page-bar">
      <div class="page-title-breadcrumb">
        <div class=" pull-left">
          <div class="page-title">
            <%= __('All Customers Information') %>
          </div>
        </div>
        <ol class="breadcrumb page-breadcrumb pull-right">
          <li><i class="fa fa-home"></i>&nbsp;<a class="parent-item" href="/admin/dashboard">
              <%= __('Home') %>
            </a>&nbsp;<i class="fa fa-angle-right"></i>
          </li>
          <li><a class="parent-item" href="#">
              <%= __('Customers Info') %>
            </a>&nbsp;<i class="fa fa-angle-right"></i>
          </li>
        </ol>
      </div>
    </div>

    <div class="container mt-5">
      <div class="row">
        <div class="col-md-12">
          <!-- <h1 class="text-center">SMS Campaign Dashboard</h1> -->
          <!-- <% if (message) { %>
            <div class="alert alert-success" id="success-message"><%= message %></div>
          <% } %>
          <% if (error) { %>
            <div class="alert alert-danger" id="error-message"><%= error %></div>
          <% } %> -->

          <!-- Dropdown for month-year selection -->
          <!-- <div class="form-group">
            <label for="monthYearSelect">Select Month-Year:</label>
            <select class="form-control" id="monthYearSelect" onchange="updateChart()">
              <% for (let i = 0; i < monthsData.length; i++) { %>
                <option value="<%= monthsData[i].year %>-<%= monthsData[i].month %>">
                  <%= monthsData[i].monthName %> <%= monthsData[i].year %>
                </option>
              <% } %>
            </select>
          </div> -->

          <!-- Chart.js Canvas -->
          <!-- <div class="card mt-3">
            <div class="card-body">
              <canvas id="smsChart"></canvas>
            </div>
          </div> -->

          <div class="card mt-3">
            <div class="card-body">
              <div class="row">
                <div class="col-md-6">
                  <canvas id="smsChart"></canvas>
                </div>
                <div class="col-md-6">
                  <canvas id="lineChart"></canvas>
                </div>
              </div>
            </div>
          </div>

          <div class="mt-5">
            <table class="table table-striped table-bordered">
              <thead>
                <tr>
                  <th>S. No.</th>
                  <th>Name</th>
                  <th>Age</th>
                  <th>Contact Number</th>
                  <th>Last Visit</th>
                  <th>Loyalty Points</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% if (items.length > 0) { %>
                  <% items.forEach((customer, index) => { %>
                    <% customer.Customer_Visits.forEach((visit) => { %>
                      <tr>
                        <td><%= index + 1 + ((currentPage - 1) * 10) %></td>
                        <td><%= customer.name %></td>
                        <td><%= customer.age %></td>
                        <td><%= customer.contact_number %></td>
                        <td><%= visit.visit_date %></td>
                        <td><%= customer.total_loyalty_point !== null ? customer.total_loyalty_point : 0 %></td>
                        <td>
                          <a href="/admin/edit-customer/<%= customer.id %>" class="btn btn-warning">Edit</a>
                          <a href="/admin/customer/detail/<%= customer.id %>" class="btn btn-info">View Details</a>
                        </td>
                      </tr>
                    <% }) %>
                  <% }) %>
                <% } else { %>
                  <tr>
                    <td colspan="7" class="text-center">No data found</td>
                  </tr>
                <% } %>
              </tbody>
            </table>
            <nav aria-label="Page navigation example">
              <ul class="pagination">
                <% for (let i = 1; i <= totalPages; i++) { %>
                  <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                    <a class="page-link" href="?page=<%= i %>&search_text=<%= search_text %>"><%= i %></a>
                  </li>
                <% } %>
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </div>
<!-- 
    <script>
      const ctx = document.getElementById('smsChart').getContext('2d');
      let smsChart; // Variable to store the Chart.js instance

      // Initial data for Chart.js
      const initialData = {
        labels: Array.from({ length: 12 }, (_, i) => {
          const date = new Date();
          date.setMonth(date.getMonth() - i);
          return date.toLocaleString('default', { month: 'short', year: 'numeric' });
        }).reverse(),
        datasets: [{
          label: 'SMS Delivered',
          data: <%= JSON.stringify(smsDeliveredData) %>,
          borderColor: 'rgba(75, 192, 192, 1)',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          fill: true
        }, {
          label: 'Customers Visited',
          data: <%= JSON.stringify(customersVisitedData) %>,
          borderColor: 'rgba(153, 102, 255, 1)',
          backgroundColor: 'rgba(153, 102, 255, 0.2)',
          fill: true
        }]
      };

      // Chart.js options
      const options = {
        responsive: true,
        scales: {
          x: {
            beginAtZero: true
          },
          y: {
            beginAtZero: true
          }
        }
      };

      // Initialize Chart.js with initial data and options
      smsChart = new Chart(ctx, {
        type: 'line',
        data: initialData,
        options: options
      });

      // Function to update the chart based on selected month-year
      function updateChart() {
        const selectedValue = document.getElementById('monthYearSelect').value;
        const [year, month] = selectedValue.split('-');

        // Fetch new data based on selected year and month via API (adjust endpoint and method as per your setup)
        fetch(`/admin/campaign-analytics?year=${year}&month=${month}`)
          .then(response => response.json())
          .then(data => {
            // Update Chart.js datasets with new data
            smsChart.data.datasets[0].data = data.smsDeliveredData;
            smsChart.data.datasets[1].data = data.customersVisitedData;
            smsChart.update(); // Update the chart
          })
          .catch(error => {
            console.error('Error fetching data:', error);
          });
      }
    </script> -->
<!-- 
    <script>
      const ctxSms = document.getElementById('smsChart').getContext('2d');
      const ctxLine = document.getElementById('lineChart').getContext('2d');
      let smsChart, lineChart;
    
      // Initial data for SMS Chart
      const smsData = {
        labels: Array.from({ length: 12 }, (_, i) => {
          const date = new Date();
          date.setMonth(date.getMonth() - i);
          return date.toLocaleString('default', { month: 'short', year: 'numeric' });
        }).reverse(),
        datasets: [{
          label: 'SMS Delivered',
          data: <%= JSON.stringify(smsDeliveredData) %>,
          borderColor: 'rgba(75, 192, 192, 1)',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          fill: true
        }, {
          label: 'Customers Visited',
          data: <%= JSON.stringify(customersVisitedData) %>,
          borderColor: 'rgba(153, 102, 255, 1)',
          backgroundColor: 'rgba(153, 102, 255, 0.2)',
          fill: true
        }]
      };
    
      // Initial data for Line Chart (example data, replace with your actual data)
      const lineData = {
        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
        datasets: [{
          label: 'Sales',
          data: [12, 19, 3, 5, 2, 3],
          borderColor: 'rgba(255, 99, 132, 1)',
          tension: 0.1
        }]
      };
    
      // Chart.js options
      const options = {
        responsive: true,
        scales: {
          x: {
            beginAtZero: true
          },
          y: {
            beginAtZero: true
          }
        }
      };
    
      // Initialize SMS Chart
      smsChart = new Chart(ctxSms, {
        type: 'line',
        data: smsData,
        options: options
      });
    
      // Initialize Line Chart
      lineChart = new Chart(ctxLine, {
        type: 'line',
        data: lineData,
        options: options
      });
    
      // Function to update the charts based on selected month-year
      function updateCharts() {
        const selectedValue = document.getElementById('monthYearSelect').value;
        const [year, month] = selectedValue.split('-');
    
        // Fetch new data based on selected year and month via API
        fetch(`/admin/campaign-analytics?year=${year}&month=${month}`)
          .then(response => response.json())
          .then(data => {
            // Update SMS Chart
            smsChart.data.datasets[0].data = data.smsDeliveredData;
            smsChart.data.datasets[1].data = data.customersVisitedData;
            smsChart.update();
    
            // Update Line Chart (assuming you have this data in your API response)
            lineChart.data.datasets[0].data = data.salesData; // Replace with your actual data
            lineChart.update();
          })
          .catch(error => {
            console.error('Error fetching data:', error);
          });
      }
    </script> -->


    <script>
      const ctxSms = document.getElementById('smsChart').getContext('2d');
      const ctxLine = document.getElementById('lineChart').getContext('2d');
      let smsChart, lineChart;
    
      // Initial data for SMS Chart
      const smsData = {
        labels: Array.from({ length: 12 }, (_, i) => {
          const date = new Date();
          date.setMonth(date.getMonth() - i);
          return date.toLocaleString('default', { month: 'short', year: 'numeric' });
        }).reverse(),
        datasets: [{
          label: 'SMS Delivered',
          data: <%= JSON.stringify(smsDeliveredData) %>,
          borderColor: 'rgba(75, 192, 192, 1)',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          fill: true
        }, {
          label: 'Customers Visited',
          data: <%= JSON.stringify(customersVisitedData) %>,
          borderColor: 'rgba(153, 102, 255, 1)',
          backgroundColor: 'rgba(153, 102, 255, 0.2)',
          fill: true
        }]
      };
    
      // Initial data for Line Chart (example data, replace with your actual data)
      const lineData = {
        labels:Array.from({ length: 12 }, (_, i) => {
          const date = new Date();
          date.setMonth(date.getMonth() - i);
          return date.toLocaleString('default', { month: 'short', year: 'numeric' });
        }).reverse(), 
        datasets: [{
          label: 'Redeemed Points',
          data: <%= JSON.stringify(redeemedLoyaltyPointData) %>, 
          borderColor: 'rgba(54, 162, 235, 1)',
          backgroundColor: 'rgba(54, 162, 235, 0.8)',
          tension: 0.1,
          fill: true
        }]
      };
    
      // Chart.js options
      const options = {
        responsive: true,
        scales: {
          x: {
            beginAtZero: true
          },
          y: {
            beginAtZero: true
          }
        }
      };
    
      // Initialize SMS Chart
      smsChart = new Chart(ctxSms, {
        type: 'line',
        data: smsData,
        options: options
      });
    
      // Initialize Line Chart
      lineChart = new Chart(ctxLine, {
        type: 'bar',
        data: lineData,
        options: options
      });
    
      // Function to update the charts based on selected month-year
      function updateCharts() {
        const selectedValue = document.getElementById('monthYearSelect').value;
        const [year, month] = selectedValue.split('-');
    
        // Fetch new data based on selected year and month via API
        fetch(`/admin/campaign-analytics?year=${year}&month=${month}`)
          .then(response => response.json())
          .then(data => {
            // Update SMS Chart
            smsChart.data.datasets[0].data = data.smsDeliveredData;
            smsChart.data.datasets[1].data = data.customersVisitedData;
            smsChart.update();
    
            // Update Line Chart with redeemed points data
            lineChart.data.datasets[0].data = data.redeemedLoyaltyPointData; // Use your actual data
            lineChart.update();
          })
          .catch(error => {
            console.error('Error fetching data:', error);
          });
      }
    </script>
    

  </div>
</div>
